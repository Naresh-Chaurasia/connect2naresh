<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technical on Naresh Chaurasia</title>
    <link>https://naresh-chaurasia.github.io/connect2naresh/technical/</link>
    <description>Recent content in Technical on Naresh Chaurasia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Oct 2022 10:00:00 +0530</lastBuildDate><atom:link href="https://naresh-chaurasia.github.io/connect2naresh/technical/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Microservices - API Management</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/ms-api-management/</link>
      <pubDate>Tue, 25 Oct 2022 10:00:00 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/ms-api-management/</guid>
      <description>Consumers of Microservices API What is API Management How does API Management Work API management control Consumers of Microservices API Microservices API are consumed by 3 types of consumers, these being private or internal API consumer, public or external consumers, partner API. So depending on the consumer of the API and API is marked as private, public or partner API.
Private or Internal API consumer
The Private or Internal API consumer are microservices that are built by team(s), which are in similar organization.</description>
    </item>
    <item>
      <title>Amol B</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/amol-b/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/amol-b/</guid>
      <description>NC: When you learn product, you learn the functionalities and offering of the product. or what else do you learn in product.
Technology: Architecture, tech stack, deployment, infra, monitoring Functionalities: Key features Roadmap For functional stuff typically I have product owners. Luckily my product is all service layer.. complete integrations Product is for Backend activities of hospital . Billing, insurance claims, accounting etc. iimjobs
https://www.iimjobs.com/j/director-engineer-healthcare-18-27-yrs-1197989.html Architect
Banking - entire product landscape used in particular retail bank Regulations and it&amp;rsquo;s impact on arch and technology and implementation Digital strategy used in banks Expertise in one area in tech perspective like say core banking EA strategy used in banks Challenges business and tech faced by banking New business and tech trends in banking 3rd party stakeholders or systems banks typically need to interact with Key 3rd party tech tools used in banks like bank specifics e.</description>
    </item>
    <item>
      <title>API and File Based Integration</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/file-api/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/file-api/</guid>
      <description>What’s what Major challenges around file-based integration and how to prevent them Common issues that affect API integration and how to avoid them What’s what File-based integration is the communication between two systems that occurs via a file that represents the initial data source and its destination data.
To synchronize data with another system, file-based architecture sends a CSV file or a flat file. A CSV file can only contain a single file, whereas a flat file can combine elements from a number of files.</description>
    </item>
    <item>
      <title>Apigee Gateway</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/apigee/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/apigee/</guid>
      <description>API Management Use Case What is APIGEE API Management Use Case Organisation has decided to expose these APIs to other organisations (Clients) While doing so below challenges arise Expose as less complex REST API with API spec Track consumers (Developer apps) Traffic management Consider better security options Analytics Support Https and JSON payload Group services into Products and monetize Existing services are not scalable It will be great if all the above features can be added to APIs without the need to modify existing services This is where API Management platforms comes into picture What is APIGEE Apigee is an API Management platform that provides all the above mentioned capabilities and few more features</description>
    </item>
    <item>
      <title>Architect Memi Lavi</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/architect-memi-lavi/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/architect-memi-lavi/</guid>
      <description> What is Software Architect The Architect&amp;rsquo;s Mindset 2. What is Software Architect The Architect&amp;rsquo;s Mindset </description>
    </item>
    <item>
      <title>AWS Solution Architect</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/aws-solution-architect/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/aws-solution-architect/</guid>
      <description>Checklist Course Material Reference Diagrams and Pics Others Study Room AWS Solution Architect, using Peg System and Memory Palace. A peg will refer to item, which in turn will be placed on Memory Palace.
Door Outside - Queue Printout (Queue, EC2, S3) Door Inside (Hanging Hooks) - Each hook is a Region. Choose Your Regions. How to choose your region. The C-PPAc regions. Pillar - 1 Photo Frame Wall Tubelight Book Unit Window Glass Window Grill Window Platform Window Cheats Study Wall Bathroom Door Designer Wall Designer Wall Switch Board Study Table Study Lamp Digital Writing Pad Digital Pen Headphone Laptop Monitor Laptop Chassis Monitor Monitor Stand Monitor Ganpati USB Extension Mouse Office Laptop Charger </description>
    </item>
    <item>
      <title>Digital Transformation</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/digital-transformation/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/digital-transformation/</guid>
      <description>Glossary Glossary business model
A plan for the successful operation of a business, identifying sources of revenue, the intended customer base, products, and details of financing.
business strategy
In essence, a business strategy is an organizational master plan. This plan is what the management of a company develops and implements to achieve their strategic goals. Essentially, a business plan is a long-term sketch of the desired strategic destination for a company.</description>
    </item>
    <item>
      <title>File-Based Data Integration</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/file-integration/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/file-integration/</guid>
      <description></description>
    </item>
    <item>
      <title>How To Learn Programming</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/programming/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/programming/</guid>
      <description></description>
    </item>
    <item>
      <title>Learn Programming</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/learn-programming/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/learn-programming/</guid>
      <description>References A B </description>
    </item>
    <item>
      <title>Microservices Architecture</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/microservice/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/microservice/</guid>
      <description>Springboot Microservices Reference Implementation AWS Serverless REST APIs Springboot Microservices Reference Implementation Eureka Discovery Service Account Management Microservice - Registration, Login, Authentication, User Status Spring Cloud API Gateway as a Load Balancer H2 In-Memory Database Spring Cloud API Gateway - Creating a Custom Filters, Gateway Global Filters Spring Cloud Config Server - Git Backend Spring Cloud Bus Spring Cloud Config - File System Backend Spring Cloud Config - Configuration for Multiple Microservices Spring Boot Actuator Using MySQL Instead of In-Memory Database Encryption and Decryption Microservices Communication Microservices communications - Hystrix Circuit Breaker, Resilience4j - Circuit Breaker, Resilience4j - Retry.</description>
    </item>
    <item>
      <title>Microservices Reference Implementation</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/microservice-ri/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/microservice-ri/</guid>
      <description>What is Microservices Microservices is an architectural style that structures an application as a collection of services, communicating through lightweight protocols, that are
Highly maintainable and testable Loosely coupled Independently deployable Organized around business capabilities Owned by a small team The microservice architecture enables the rapid, frequent and reliable delivery of large, complex applications. It also enables an organization to evolve its technology stack.
Monolith V/s Microservices We have a monolithic application which can be a single springboot application with multiple controller classes.</description>
    </item>
    <item>
      <title>Spring Framework</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/spring-framework/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/spring-framework/</guid>
      <description>Actionable Items for Blogging Course Material Reference Diagrams and Pics Others What is Spring? Meet the Spring Family
The Spring family all began with the creation of the Spring Framework, which was built largely in response to the complexity of developing applications using Java&amp;rsquo;s enterprise framework called J2EE, it&amp;rsquo;s now called Java EE, and the Spring Framework aimed at removing the complexity and helped to make things like web development and data access easier for developers to implement.</description>
    </item>
    <item>
      <title>Visual Code Hacks</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/visual-code/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/visual-code/</guid>
      <description> Short Cuts References Short Cuts Command Palette: Ctrl + Shift + P Go to Explorer (Ctrl + Shift + E) Right click on your favorite folder, Select &amp;ldquo;Find in folder&amp;rdquo; (Alt + Shift + F) Search Files: Ctrl + Shift + F References https://www.crio.do/blog/vs-code-shortcuts/ </description>
    </item>
    <item>
      <title>Why Python</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/why-python/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/why-python/</guid>
      <description>Why Python? Simple to Learn
Python is very simple to learn. Very minimal computer knowledge is required to learn and use Python. You don&amp;rsquo;t need to know the difference between computer memory and a hard drive, you don&amp;rsquo;t need to know what an operating system is, you don&amp;rsquo;t need to know what a compiler is, nor do you need to know about build systems, and you don&amp;rsquo;t need to learn any other programming languages first.</description>
    </item>
    <item>
      <title>YouTube Playlist</title>
      <link>https://naresh-chaurasia.github.io/connect2naresh/technical/youtube-playlist/</link>
      <pubDate>Mon, 10 Jan 2022 08:00:12 +0530</pubDate>
      <guid>https://naresh-chaurasia.github.io/connect2naresh/technical/youtube-playlist/</guid>
      <description> Advanced Python Scripting API Automation Core Java C++ Java Selenium Automation Python for Data Analysis Advanced Python Scripting API Automation Core Java C++ Java Selenium Automation Python for Data Analysis </description>
    </item>
  </channel>
</rss>