[
  {
    "content": "Basic Home Page This page contains basic getting started. This information is used extensively on day today basis.\nHugo Documentation Visual Code Documentation IntelliJ documentation ",
    "description": "",
    "tags": null,
    "title": "Basics",
    "uri": "/connect2naresh/basics/"
  },
  {
    "content": "Chapter X Some Chapter title Lorem Ipsum.\n",
    "description": "",
    "tags": null,
    "title": "Core Java",
    "uri": "/connect2naresh/core-java/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "J2EE",
    "uri": "/connect2naresh/j2ee/"
  },
  {
    "content": "Python: The Future Of Programming In today‚Äôs fast-evolving tech landscape, the choice of your first (or next) programming language can shape your career. If you‚Äôre wondering where to invest your time and effort, Python stands out as the smartest bet in 2025 and beyond.\nüöÄ Python Is Everywhere\nPython isn‚Äôt just a language; it‚Äôs a gateway into multiple booming industries:\nWeb development: With frameworks like Django and Flask. Data science and machine learning: Powering tools used by data analysts, scientists, and AI engineers. Automation and DevOps: Simplify repetitive tasks and manage infrastructure. Cybersecurity: Used in scripting, automation, and threat detection tools. Finance and fintech: Driving quantitative research, analytics, and trading bots. Game development, IoT, and hardware interaction: Yes, Python does that too! üíº Career Opportunities: Python Skills Are in High Demand\nLet‚Äôs talk about what matters most: jobs and income.\nüîç Job Market Snapshot\nAccording to Indeed, Python consistently ranks among the top 3 most in-demand programming languages. The average Python developer salary in the US is $115,000+ per year, with senior roles going as high as $160,000 or more. Companies hiring Python developers include Google, Netflix, Amazon, NASA, IBM, and almost every startup in the tech world. Whether you‚Äôre an absolute beginner or someone switching careers, Python opens doors to roles like:\nPython Developer Data Analyst / Data Scientist Machine Learning Engineer Cloud Engineer Backend Developer Automation Tester DevOps Engineer üìà Future of Python\nPython‚Äôs future looks incredibly bright, and here‚Äôs why:\nAI \u0026 Machine Learning Boom: Python is the go-to language for AI. Libraries like TensorFlow, PyTorch, Scikit-learn, and OpenAI‚Äôs tools are built for Python. Simplicity + Power = Longevity: Python‚Äôs readable syntax makes it ideal for beginners, but it‚Äôs powerful enough for experts building complex systems. Cross-industry adoption: From healthcare to space science, Python is everywhere. Its versatility ensures it remains relevant for decades. Strong Community and Ecosystem: With millions of developers worldwide, Python has a rich ecosystem of libraries, frameworks, and documentation. Cloud and Automation Growth: As companies move to the cloud and adopt DevOps, Python is becoming critical in managing infrastructure and writing cloud scripts. ",
    "description": "",
    "tags": null,
    "title": "Python",
    "uri": "/connect2naresh/python/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Naresh Chaurasia",
    "uri": "/connect2naresh/"
  },
  {
    "content": "Python is a simple, easy-to-learn programming language that‚Äôs perfect for beginners. It uses clean, readable syntax that feels like writing plain English, making it a great first language for anyone new to coding.\nIn the beginning, you‚Äôll learn how to install Python on your computer, explore popular code editors like VS Code and PyCharm, and write your very first Python program.\nYou‚Äôll also understand how Python code runs, how to use the Python interpreter, and get comfortable with basic tools that make coding fun and efficient.\nThis foundation sets you up for all the exciting things you‚Äôll build with Python!\nüìö Table of Contents Introduction to Python Basic Syntax and Operations Control Flow Data Structures Functions Object-Oriented Programming (OOP) File Handling Error Handling Modules and Packages Visual Studio Code Google Colab PIP and Virtual Environment 1. Introduction to Python Overview of Python Installation and Setup Python IDEs (PyCharm, VSCode, etc.) Writing and Running Your First Python Program 2. Basic Syntax and Operations Variables and Data Types Basic Input and Output Arithmetic, Comparison, and Logical Operators Python Comments and Documentation 3. Control Flow Conditional Statements (if, elif, else) Looping Constructs (for, while) break, continue, pass Statements 4. Data Structures Lists Creating, Accessing, and Modifying Lists List Methods Tuples Differences between Lists and Tuples Dictionaries Key-Value Pairs, Common Methods Sets Creating Sets, Set Operations 5. Functions Defining and Calling Functions Function Arguments (positional, keyword, default) Return Statements Lambda Functions Scope of Variables (local, global) 6. Object-Oriented Programming (OOP) Introduction to Classes and Objects Constructors and Destructors Class and Instance Variables Methods (instance, class, static) Inheritance, Polymorphism, and Encapsulation Magic Methods and Operator Overloading 7. File Handling Reading and Writing Text Files File Methods (open, read, write, close) Working with CSV Files 8. Error Handling Types of Errors (syntax, runtime) Exception Handling (try, except, finally) Custom Exceptions 9. Modules and Packages Importing Built-in and External Modules Creating Custom Modules Package Structure and Importing 10. Visual Studio Code Installing and Setting Up VS Code Creating and Running Python Files Visual Studio Code Plugins 11. Google Colab What is Google Colab? Using Google Colab for Python Programming Uploading and Downloading Files Running Code in the Cloud Sharing and Collaboration Features 12. PIP and Virtual Environment Introduction to pip Installing Packages using pip Upgrading and Uninstalling Packages What is a Virtual Environment? Creating a Virtual Environment with venv Activating and Deactivating the Environment Managing Dependencies with requirements.txt ",
    "description": "",
    "tags": null,
    "title": "Python Basics",
    "uri": "/connect2naresh/python/python-basics/"
  },
  {
    "content": "Python is a simple, easy-to-learn programming language that‚Äôs perfect for beginners. It uses clean, readable syntax that feels like writing plain English, making it a great first language for anyone new to coding.\nIn the beginning, you‚Äôll learn how to install Python on your computer, explore popular code editors like VS Code and PyCharm, and write your very first Python program.\nYou‚Äôll also understand how Python code runs, how to use the Python interpreter, and get comfortable with basic tools that make coding fun and efficient.\nThis foundation sets you up for all the exciting things you‚Äôll build with Python!\nüìö Table of Contents Introduction to Python Basic Syntax and Operations Control Flow Data Structures Functions Object-Oriented Programming (OOP) File Handling Error Handling Modules and Packages Advanced Topics Data Science Libraries (Introduction) Web Scraping APIs and JSON Visual Studio Code Google Colab PIP and Virtual Environment Python Project 1: Personal Book Manager Python Project 2: Quote Explorer 1. Introduction to Python Overview of Python Installation and Setup Python IDEs (PyCharm, VSCode, etc.) Writing and Running Your First Python Program 2. Basic Syntax and Operations Variables and Data Types Basic Input and Output Arithmetic, Comparison, and Logical Operators Python Comments and Documentation 3. Control Flow Conditional Statements (if, elif, else) Looping Constructs (for, while) break, continue, pass Statements 4. Data Structures Lists Creating, Accessing, and Modifying Lists List Methods Tuples Differences between Lists and Tuples Dictionaries Key-Value Pairs, Common Methods Sets Creating Sets, Set Operations 5. Functions Defining and Calling Functions Function Arguments (positional, keyword, default) Return Statements Lambda Functions Scope of Variables (local, global) 6. Object-Oriented Programming (OOP) Introduction to Classes and Objects Constructors and Destructors Class and Instance Variables Methods (instance, class, static) Inheritance, Polymorphism, and Encapsulation Magic Methods and Operator Overloading 7. File Handling Reading and Writing Text Files File Methods (open, read, write, close) Working with CSV Files 8. Error Handling Types of Errors (syntax, runtime) Exception Handling (try, except, finally) Custom Exceptions 9. Modules and Packages Importing Built-in and External Modules Creating Custom Modules Package Structure and Importing 10. Advanced Topics List Comprehensions Generators and Iterators Decorators Context Managers (with statement) 11. Data Science Libraries (Introduction) NumPy Basics Pandas for Data Manipulation Matplotlib for Basic Plotting 12. Web Scraping Using BeautifulSoup and Requests Extracting Data from HTML 13. APIs and JSON Introduction to REST APIs Making API Requests Working with JSON Data 14. Visual Studio Code Installing and Setting Up VS Code Creating and Running Python Files Visual Studio Code Plugins 15. Google Colab What is Google Colab? Using Google Colab for Python Programming Uploading and Downloading Files Running Code in the Cloud Sharing and Collaboration Features 16. PIP and Virtual Environment Introduction to pip Installing Packages using pip Upgrading and Uninstalling Packages What is a Virtual Environment? Creating a Virtual Environment with venv Activating and Deactivating the Environment Managing Dependencies with requirements.txt Python Project 1: Personal Book Manager (CLI-Based) üéØ Objective Build a command-line Python application to manage a personal library of books.\nüì¶ Concepts Covered Variables, I/O, Lists, Dictionaries Functions, File Handling Exception Handling CSV and JSON Decorators, Generators OOP (Optional) üîß Requirements 1. User Authentication Accept username/password (hardcoded or stored) 2. Menu Options Add, View, Search, Update, Delete, Export, Exit 3. Data Storage books = [ {\"title\": \"Python 101\", \"author\": \"John Doe\", \"genre\": \"Education\", \"rating\": 4.5}, ] 4. File Handling Load from JSON on start Save to JSON on exit 5. Functions Use a separate function for each operation 6. CSV Export Use csv module 7. Optional OOP Create a Book class 8. Bonus Logging with decorators Book generator üß™ Sample Output Welcome to Personal Book Manager! 1. Add Book 2. View All 3. Search 4. Update Rating 5. Delete Book 6. Export 7. Exit Choose an option: Python Project 2: Quote Explorer (Web + CLI-Based) üéØ Objective Scrape quotes from the web and interactively search/explore them.\nüì¶ Concepts Covered Web Scraping (requests, BeautifulSoup) Functions, Lists, Error Handling JSON, Custom Exceptions OOP (Optional) üîß Requirements 1. Data Source https://quotes.toscrape.com (first 5 pages) 2. Scraped Data Quote text, Author, Tags 3. Menu Options View all, Search by author/tag, Export, Exit 4. Web Scraping Use requests and BeautifulSoup 5. Data Storage Store in a list of dictionaries Optionally save/load JSON 6. Error Handling Network issues, invalid input, missing data 7. Optional OOP Class Quote with:\nmatches_author() has_tag() üß™ Sample Output Welcome to Quote Explorer! 1. View All Quotes 2. Search by Author 3. Search by Tag 4. Export to JSON 5. Exit Choose an option: üìù Sample Quote Format { \"quote\": \"Life is what happens when you're busy making other plans.\", \"author\": \"John Lennon\", \"tags\": [\"life\", \"plans\"] } ",
    "description": "",
    "tags": null,
    "title": "Python Programming",
    "uri": "/connect2naresh/python/python/"
  },
  {
    "content": "üìö Table of Contents 1. Introduction to Selenium and Python 2. Python Fundamentals (Prerequisite Topics) 3. Getting Started with Selenium 4. Interacting with Web Elements 5. Handling Web Elements 6. Advanced Python for Selenium 7. Advanced Selenium Techniques 8. Data-Driven Testing 9. Selenium with PyTest Framework 10. Page Object Model (POM) and Design Patterns 11. Cross-Browser and Parallel Testing 12. Continuous Integration and Reporting 13. Best Practices and Optimization 14. Project: End-to-End Test Automation 15. Mock Interview Preparation 16. Assignments and Exercises 1. Introduction to Selenium and Python What is Selenium? Importance of automation testing. Overview of Python and why it is used with Selenium. Setting up Python and IDE (PyCharm, VS Code). Installing Selenium and necessary libraries. Mock interview sessions on Selenium and Python basics will be conducted regularly.\n2. Python Fundamentals (Prerequisite Topics) Python Basics\nPython syntax and structure. Variables and data types (int, float, string, boolean). Basic input and output. Operators in Python\nArithmetic, comparison, and logical operators. Assignment and membership operators. Control Flow\nif, else, elif statements. Nested conditions. Loops in Python\nfor and while loops. Using break, continue, and pass statements. Functions in Python\nDefining and calling functions. Function parameters and return values. Lambda functions. Exception Handling\ntry, except, finally blocks. Handling multiple exceptions. File Handling\nReading and writing files. Using with open() for file management. Working with Libraries\nImporting libraries. Using pip for package management. Mock interview sessions on Python fundamentals will be conducted regularly.\n3. Getting Started with Selenium Introduction to WebDriver. Inspecting web elements (HTML, CSS, XPath). Locating elements: By ID, Name, Class, Tag Name. By CSS Selector and XPath. Browser navigation commands: get(), back(), forward(), refresh(). Mock interview sessions on Selenium basics will be conducted regularly.\n4. Interacting with Web Elements Performing actions: Clicking buttons. Entering text into input fields. Selecting dropdown options. Handling checkboxes and radio buttons. Submitting forms. Working with keyboard and mouse events: send_keys() ActionChains Mock interview sessions on interacting with web elements will be conducted regularly.\n5. Handling Web Elements Working with static and dynamic web pages. Handling waits: Implicit wait. Explicit wait. Fluent wait. Handling alerts, pop-ups, and confirmations. Working with iframes. Mock interview sessions on handling web elements will be conducted regularly.\n6. Advanced Python for Selenium Object-Oriented Programming (OOP)\nClasses and objects. Inheritance and polymorphism. Encapsulation. List, Tuple, Dictionary, and Set\nOperations and methods. Iterating through collections. Comprehensions\nList, dictionary, and set comprehensions. Regular Expressions\nUsing re module. Pattern matching and searching. Date and Time Handling\nUsing datetime module. Formatting and parsing dates. Working with JSON and CSV Files\nReading and writing JSON. Using csv module for CSV files. Mock interview sessions on advanced Python topics will be conducted regularly.\n7. Advanced Selenium Techniques Taking screenshots. Executing JavaScript with Selenium. Working with multiple browser windows and tabs. Handling browser cookies. Downloading and uploading files using Selenium. Mock interview sessions on advanced Selenium techniques will be conducted regularly.\n8. Data-Driven Testing Introduction to data-driven testing. Reading data from: Excel files using openpyxl. CSV files. Parameterizing test cases. Mock interview sessions on data-driven testing will be conducted regularly.\n9. Selenium with PyTest Framework Introduction to PyTest. Setting up PyTest with Selenium. Writing and running test cases. Using assertions in PyTest. Implementing fixtures. Generating test reports. Mock interview sessions on PyTest framework will be conducted regularly.\n10. Page Object Model (POM) and Design Patterns What is POM and why use it? Creating page classes. Separating test logic from page actions. Implementing reusable components. Using POM with PyTest. Mock interview sessions on POM and design patterns will be conducted regularly.\n11. Cross-Browser and Parallel Testing Running tests on different browsers (Chrome, Firefox, Edge). Using pytest-xdist for parallel execution. Running headless browser tests. Mock interview sessions on cross-browser and parallel testing will be conducted regularly.\n12. Continuous Integration and Reporting Integrating Selenium with GitHub Actions. Generating HTML reports. Using Allure for better reporting. Running tests in CI/CD pipelines. Mock interview sessions on CI/CD and reporting will be conducted regularly.\n13. Best Practices and Optimization Writing efficient and maintainable Selenium scripts. Using reusable functions and utilities. Handling flaky tests and retries. Optimizing test execution time. Mock interview sessions on best practices will be conducted regularly.\n14. Project: End-to-End Test Automation Creating a sample project. Automating an e-commerce website. Performing: User login/logout. Adding items to the cart. Checkout process. Generating reports and analyzing results. Mock interview sessions on end-to-end test automation will be conducted regularly.\n15. Mock Interview Preparation Mock Interview Sessions\nConducting mock interviews simulating real interview scenarios. Asking practical and theoretical Selenium + Python questions. Behavioral and Technical Questions\nCommon interview questions for automation testers. Questions on Python fundamentals and Selenium commands. Questions on PyTest, POM, and reporting. Coding Challenges\nWriting automation scripts under time constraints. Solving Python-based automation problems. Debugging and optimizing code. 16. Assignments and Exercises Objective Assignments\nMultiple-choice questions covering: Selenium fundamentals. Python basics and advanced concepts. PyTest framework. Testing concepts with practical scenarios. Coding Assignments\nWriting Selenium scripts for: Form submission and validation. Dynamic element handling. Data-driven test execution. Creating POM-based test frameworks. Running cross-browser and parallel tests. Debugging Challenges\nIdentifying and fixing issues in sample Selenium scripts. Optimizing slow or failing test cases. ",
    "description": "",
    "tags": null,
    "title": "Python Selenium",
    "uri": "/connect2naresh/python/python-selenium/"
  },
  {
    "content": "For the time being, this page will server as canvass for me for anything related to core java with respect to creating Udemy course. Any idea that come to mind will be captured here.\nLater on you might put these information in different and appropriate locations, but for now let me have everything here.\nUdemy, YouTube There is a lot of difference in teaching java and teaching java for selenium. Make sure you understand and respect the boundries.\nCheck out Best Selling Selenium course on Udemy. Go through its Java Content. Capture the idea. Check out Best Selling Java course on Udemy. Capture the idea. Check out Highest Rated Java course on YouTube. Capture the idea. Udemy Java Selenium ",
    "description": "",
    "tags": null,
    "title": "Core Java",
    "uri": "/connect2naresh/core-java/core-java/"
  },
  {
    "content": "üöÄ Full Course: Enterprise Java Development with Spring \u0026 Docker üìò Table of Contents 1. üå± Spring Framework 2. ‚ö° Spring Boot 3. ‚òÅÔ∏è Spring Cloud 4. üß© Spring Microservices 5. üóÉÔ∏è Spring Data JPA 6. üõ†Ô∏è Hibernate Framework 7. üê≥ Docker 8. üîê Security with Spring and JWT 9. üìö Microservice Project 1 - Book Management System 10. üõí Microservice Project 2 - Online Order Processing System 1. üå± Spring Framework 1.1 üåø Introduction to Spring What is Spring? Features and advantages Spring modules overview 1.2 üîÑ Core Concepts IoC and DI Bean lifecycle, scopes Autowiring and annotations 1.3 ‚öôÔ∏è Configuration XML vs Annotation Java config and profiles 1.4 üéØ AOP Concepts and use cases Pointcuts, advices, aspects 2. ‚ö° Spring Boot 2.1 üöÄ Introduction Need for Spring Boot Differences from Spring Framework 2.2 üß± Project Setup Spring Initializr Maven/Gradle 2.3 üß† Core Features Auto configuration Profiles and external configs Embedded servers 2.4 üåê REST APIs Controllers, CRUD operations Exception handling Request validation 2.5 üß™ Testing JUnit, Mockito Integration testing 3. ‚òÅÔ∏è Spring Cloud 3.1 üåê Overview Challenges in microservices Spring Cloud components 3.2 üóÉÔ∏è Config Server Central config with Git Client integration 3.3 üîç Service Discovery Eureka Server Client registration 3.4 ‚öñÔ∏è Load Balancing Ribbon REST + Feign clients 3.5 üí• Circuit Breakers Hystrix/Fallbacks 3.6 üß≠ API Gateway Spring Cloud Gateway Filters and routing 3.7 üîé Distributed Tracing Sleuth + Zipkin integration 4. üß© Spring Microservices 4.1 üß± Architecture Monolith vs Microservices Service granularity 4.2 üß† Design DDD basics RESTful design practices 4.3 üõ†Ô∏è Implementation Stateless services Inter-service communication 4.4 üõ°Ô∏è Security Spring Security JWT + OAuth2 4.5 üì¨ Event-Driven Approach Kafka or RabbitMQ Async communication 5. üóÉÔ∏è Spring Data JPA 5.1 üîç Introduction What is Spring Data JPA? Repository pattern 5.2 üîó Entity Mapping @Entity, @Id, @OneToMany Relationships and FetchType 5.3 ‚ùì Queries Derived query methods JPQL and native queries 5.4 üîÅ Pagination \u0026 Sorting PageRequest Sorting using Sort class 5.5 ‚è±Ô∏è Auditing and DTOs Entity listeners Projections 6. üõ†Ô∏è Hibernate Framework 6.1 üìò ORM Basics Introduction to ORM Hibernate vs JPA 6.2 üßæ Configuration Hibernate.cfg.xml SessionFactory, Sessions 6.3 üîó Entity Mapping One-to-one, many-to-many Lazy vs Eager fetching 6.4 üß† Queries HQL, Criteria API Named and native queries 6.5 ‚ö° Caching and Transactions L1 \u0026 L2 cache Transaction management 7. üê≥ Docker 7.1 ‚ùì Introduction What is Docker? Benefits of containers 7.2 ‚öôÔ∏è Docker Basics Dockerfile Docker CLI 7.3 üì¶ Dockerize Spring Boot Create Dockerfile Build image and run 7.4 üß© Docker Compose Defining services Networking and volumes 7.5 üîÅ Docker in CI/CD Using Docker in Jenkins GitHub Actions 8. üîê Security with Spring and JWT 8.1 üõ°Ô∏è Introduction to Spring Security What is Spring Security? Security filters and architecture 8.2 üë• Authentication and Authorization Basic vs Form login Custom user details service Role-based access control 8.3 üîë Password Encoding BCryptPasswordEncoder Secure storage of passwords 8.4 üìú JWT (JSON Web Token) Authentication What is JWT? JWT structure and flow Generating and validating tokens 8.5 üèóÔ∏è Implementing JWT in Spring Boot Secure login endpoint to generate token Filter to validate JWT in incoming requests Stateless authentication flow 8.6 üîí Securing REST APIs Protecting endpoints with roles Global vs method-level security Using annotations: @PreAuthorize, @Secured, @RolesAllowed 8.7 üîÅ CORS and CSRF What is CORS? How to configure it in Spring? CSRF protection in stateless APIs 8.8 üß™ Testing Security Unit tests for secured endpoints Using Postman to test JWT-secured APIs 9. üìö Microservice Project 1 - Book Management System üéØ Objective: Build a microservices-based system to manage books, authors, and reviews.\nüß© Microservices: üìñ Book Service: CRUD operations for books üßë‚Äçüíª Author Service: Manage author details ‚≠ê Review Service: Add and fetch reviews üõ†Ô∏è Tech Stack: Spring Boot, Spring Data JPA Spring Cloud Eureka, Config Server Spring Cloud Gateway Docker + Docker Compose PostgreSQL or MongoDB ‚ú® Features: REST APIs for CRUD Service Discovery with Eureka API Gateway with Spring Cloud Gateway Centralized configuration Inter-service communication using Feign JWT-based authentication 10. üõí Microservice Project 2 - Online Order Processing System üéØ Objective: Develop an order management platform for a simple e-commerce flow.\nüß© Microservices: üì¶ Product Service: Manage products üìã Order Service: Place and manage orders üí≥ Payment Service: Handle payments üì¢ Notification Service: Send order updates via email (mock service) üõ†Ô∏è Tech Stack: Spring Boot, Spring Cloud Kafka (for event-driven architecture) Spring Security + JWT Docker and Docker Compose MySQL for persistence ‚ú® Features: REST endpoints for each service Kafka integration for async updates Fault tolerance with Hystrix Distributed tracing with Sleuth and Zipkin Swagger/OpenAPI documentation ",
    "description": "",
    "tags": null,
    "title": "Spring Tech Stack",
    "uri": "/connect2naresh/j2ee/spring-tech-stack/"
  },
  {
    "content": "You do not rise to the level of your goals. You fall to the level of your systems\nlink text\nHello\nHello\npdf\n",
    "description": "",
    "tags": null,
    "title": "bookmark",
    "uri": "/connect2naresh/basics/bookmark/"
  },
  {
    "content": "Bombay High Court\n",
    "description": "",
    "tags": null,
    "title": "Dummy",
    "uri": "/connect2naresh/basics/dummy/"
  },
  {
    "content": " Boat 161 Skullcandy Headphone Boat 161 Skullcandy Headphone ",
    "description": "",
    "tags": null,
    "title": "Gadgets",
    "uri": "/connect2naresh/basics/gadgets/"
  },
  {
    "content": " https://mcshelby.github.io/hugo-theme-relearn/cont/menushortcuts/index.html https://themes.gohugo.io/themes/hugo-theme-relearn/ file:///Users/nareshchaurasia/nc/Awakening-The-Giant/entrepreneur/Hugo.adoc ",
    "description": "",
    "tags": null,
    "title": "Hugo",
    "uri": "/connect2naresh/basics/hugo/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "iPhone Photography",
    "uri": "/connect2naresh/basics/iphone/"
  },
  {
    "content": " Mac Book Pro Short Cuts Working With Files and Folders YES NO Screenshot: - Command + Shift + 3, 4, 5 - Command + Shift + 4 + Spacebar Keyboard Shortcuts February $80 March $420 Mac Book Pro Short Cuts Show Desktop -\u003e Command + F3 Split Window -\u003e https://support.apple.com/en-in/HT204948 Hidden File and Folders -\u003e Command + Shift + . (period) keys at the same time Working With Files and Folders Command + N -\u003e Open Finder While On Finder Window View Menu/Show Path Bar. From the Path Bar, Open finder in new Tab (Finder can be opened in multiple tabs) Top Right corner has + button to open new Finder Tab. Java Location: /Library/Java/JavaVirtualMachines/jdk-11.0.15.1.jdk/Contents/Home\nShort Cuts\nFinder: Command + n Side Bar, Path Bar\n",
    "description": "",
    "tags": null,
    "title": "Mac Book Pro",
    "uri": "/connect2naresh/basics/mac-book-pro/"
  },
  {
    "content": " To switch between open windows in one kind of app. Hit command. Tilde. ",
    "description": "",
    "tags": null,
    "title": "Macbook",
    "uri": "/connect2naresh/basics/mac-book/"
  },
  {
    "content": " Tips \u0026 Tricks Troubleshooting Tips \u0026 Tricks https://support.apple.com/en-in/guide/mac-help/mh40695/mac Troubleshooting There is another way you can evoke a new line with that command that works as it should, but you have to switch to the Mac‚Äôs Voice Control in the Accessibility in the System Preferences window. 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\n",
    "description": "",
    "tags": null,
    "title": "MacBook Apple M1 Pro",
    "uri": "/connect2naresh/basics/mac/"
  },
  {
    "content": " Advertisement :)\npica - high quality and fast image resize in browser. babelfish - developer friendly i18n with plurals support and easy syntax. You will like those projects!\nh1 Heading 8-) h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading Horizontal Rules Typographic replacements Enable typographer option to see result.\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\ntest.. test‚Ä¶ test‚Ä¶.. test?‚Ä¶.. test!‚Ä¶.\n!!!!!! ???? ,, ‚Äì ‚Äî\n‚ÄúSmartypants, double quotes‚Äù and ‚Äòsingle quotes‚Äô\nEmphasis This is bold text\nThis is bold text\nThis is italic text\nThis is italic text\nStrikethrough\nBlockquotes Blockquotes can also be nested‚Ä¶\n‚Ä¶by using additional greater-than signs right next to each other‚Ä¶\n‚Ä¶or with spaces between arrows.\nLists Unordered\nCreate a list by starting a line with +, -, or * Sub-lists are made by indenting 2 spaces: Marker character change forces new list start: Ac tristique libero volutpat at Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Very easy! Ordered\nLorem ipsum dolor sit amet\nConsectetur adipiscing elit\nInteger molestie lorem at massa\nYou can use sequential numbers‚Ä¶\n‚Ä¶or keep all the numbers as 1.\nStart numbering with offset:\nfoo bar Code Inline code\nIndented code\n// Some comments line 1 of code line 2 of code line 3 of code Block code ‚Äúfences‚Äù\nSample text here... Syntax highlighting\nvar foo = function (bar) { return bar++; }; console.log(foo(5)); Tables Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Right aligned columns\nOption Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Links link text\nlink with title\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\nImages Like links, Images also have a footnote style syntax\nWith a reference later in the document defining the URL location:\nPlugins The killer feature of markdown-it is very effective support of syntax plugins.\nEmojies Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:\nShortcuts (emoticons): :-) :-( 8-) ;)\nsee how to change output with twemoji.\nSubscript / Superscript 19^th^ H~2~O \u003cins\u003e ++Inserted text++\n\u003cmark\u003e ==Marked text==\nFootnotes Footnote 1 link1.\nFootnote 2 link2.\nInline footnote^[Text of inline footnote] definition.\nDuplicated footnote reference2.\nDefinition lists Term 1 Definition 1 with lazy continuation.\nTerm 2 with inline markup Definition 2\n{ some code, part of Definition 2 } Third paragraph of definition 2.\nCompact style:\nTerm 1 ~ Definition 1\nTerm 2 ~ Definition 2a ~ Definition 2b\nAbbreviations This is HTML abbreviation example.\nIt converts ‚ÄúHTML‚Äù, but keep intact partial entries like ‚ÄúxxxHTMLyyy‚Äù and so on.\n*[HTML]: Hyper Text Markup Language\nCustom containers ::: warning here be dragons :::\nFootnote can have markup\nand multiple paragraphs.¬†‚Ü©Ô∏é\nFootnote text.¬†‚Ü©Ô∏é¬†‚Ü©Ô∏é\n",
    "description": "",
    "tags": null,
    "title": "Mark Down",
    "uri": "/connect2naresh/basics/mark-down/"
  },
  {
    "content": "ScreenBrush Function + F1: Right Click: Clear Screen Right Click + Command: Flashlight Right Click + Option: Color Selection Wheel Changing Colors ",
    "description": "",
    "tags": null,
    "title": "ScreenBrush",
    "uri": "/connect2naresh/basics/screen-brush/"
  },
  {
    "content": " ScreenBrush Notion Visual Studio iMovie The Complete iMovie Course - Rafi Saar Section 5 Section 7: Editing in the Timeline IntelliJ Mac Book Pro Apple Mac Basics - The Complete Course for beginners Working with Text iPhone ScreenBrush Function + F1: Right Click: Clear Screen Right Click + Command: Flashlight Right Click + Option: Color Selection Wheel Notion Tips and Tricks - Highlight and Control D. Awesome. Try. Feature. Select all. Drag and Drop Visual Studio iMovie The Complete iMovie Course - Rafi Saar Section 5 How to Favourite a clip. Section 7: Editing in the Timeline j,k,l keys - really cool Joining Splitted Clips IntelliJ Format Code: From the main menu, select Code | Reformat Code or press Ctrl+Alt+L Search in Folder: Ctrl+Shift+F Mac Book Pro Apple Mac Basics - The Complete Course for beginners Java Location: /Library/Java/JavaVirtualMachines/jdk-11.0.15.1.jdk/Contents/Home\nShort Cuts\nFinder: Command + n Side Bar, Path Bar\nWorking with Text Shift, Conrol, Option, Command\nShift + Command + Right Arrow: Entire Line Shift + Option + Right Arrow: Word by Word Shift + Press Mouse at the End of Line: It will select entire line. Read more here # It works!\nDownload file\nGeneral\n‚åò N New document ‚åò W Close document ‚åò O Open file ‚åò S Save document ‚åò Q Quit ‚åò H Hide app ‚åò M Minimize window ‚åÉ ‚åò F Full screen ‚åò P Print A A A A A A A A A ‚åò ‚áß ‚å• ‚åÉ ‚èé ‚å´ ‚éã ‚èè Ô∏é ‚á™ Command Shift Option Control Return Delete Escape Eject Caps Lock iPhone ",
    "description": "",
    "tags": null,
    "title": "Tips \u0026 Tricks",
    "uri": "/connect2naresh/basics/daily-tips-trick/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/connect2naresh/categories/"
  },
  {
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/connect2naresh/tags/"
  }
]
